{"cells":[{"metadata":{"trusted":true,"_uuid":"cf1218acfb917cf0590f68a75219182a4ff23067"},"cell_type":"markdown","source":"Since I noticed that the features were all uncorrelated, good model parameters use a low number of leaves/depth and low feature fractions, and that engineering basic interaction features doesn't help I was curious if randomly shuffling the data to create new synthenthic training set would give similar results. It turns out that it does..."},{"metadata":{"_uuid":"bd711b5da48be47354eb51569f493041a0b3b1b5","_execution_state":"idle","trusted":true},"cell_type":"code","source":"library(data.table)\nlibrary(lightgbm)\nlibrary(caret)\n\nLGB_CV_Predict <- function(lgb_cv, data, num_iteration = NULL, folds=NULL, type=c(\"cv\", \"test\")) {\n  require(foreach)\n  if (is.null(num_iteration)) {\n    num_iteration <- lgb_cv$best_iter\n  }\n  if (type==\"cv\"){\n    print(\"create cross validation predictions\")\n    pred_mat <- foreach::foreach(i = seq_along(lgb_cv$boosters), .combine = \"c\", .packages=c(\"data.table\",\"lightgbm\")) %do% {\n      lgb_tree <- lgb_cv$boosters[[i]][[1]]\n      predict(lgb_tree, \n              data[folds[[i]],], \n              num_iteration = num_iteration, \n              rawscore = FALSE, predleaf = FALSE, header = FALSE, reshape = FALSE)\n    }\n    \n    as.double(pred_mat)[order(unlist(folds))]\n    \n  } else if (type==\"test\"){\n    print(\"create test set predictions\")\n    pred_mat <- foreach::foreach(i = seq_along(lgb_cv$boosters), .combine = \"+\", .packages=c(\"data.table\",\"lightgbm\")) %do% {\n      lgb_tree <- lgb_cv$boosters[[i]][[1]]\n      predict(lgb_tree, \n              data, \n              num_iteration = lgb_cv$best_iter, \n              rawscore = FALSE, predleaf = FALSE, header = FALSE, reshape = FALSE)\n    }\n    as.double(pred_mat)/length(lgb_cv$boosters)\n  }\n}\n\n\nt1 <- fread(\"../input/train.csv\")\ns1 <- fread(\"../input/test.csv\")\nt1[,\":=\"(idx=.I,\n         filter=0)]\ns1[,\":=\"(idx=.I,\n         target=-1,\n         filter=2)]\nvar_cols <- grep(\"var_\", colnames(t1), value=T)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"7d5ae6da66b984c0dff312bef7a14e93a6fa5634"},"cell_type":"markdown","source":"Now split the training data by the target and then randomly shuffle each feature"},{"metadata":{"trusted":true,"_uuid":"6aa4fe6d08e1ab4a6768c3684dacba3d47ecee1b"},"cell_type":"code","source":"target0 <- t1[target==0]\ntarget1 <- t1[target==1]\n\nset.seed(99999)\nfor (col in var_cols){\n  set(target0, j=col, value=sample(target0[[col]], replace=F))\n  set(target1, j=col, value=sample(target1[[col]], replace=F))\n}","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"2731c45230de8321b7a37d1f2134de84d028fc08"},"cell_type":"markdown","source":"Put the training set back together and reorder it by the original order."},{"metadata":{"trusted":true,"_uuid":"fb66c70f1af1f83c7360ccd6625155e9108c0307"},"cell_type":"code","source":"t1_new <- rbind(target0, target1)\nsetorder(t1_new, idx)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"e79bf38f529a690418871c0bcd1d6cc8043b3e89"},"cell_type":"markdown","source":"Below we verify that our new training set values are different than our original."},{"metadata":{"trusted":true,"_uuid":"eb851393c2d171e3098975090998653014bb8734"},"cell_type":"code","source":"head(t1[,c(\"ID_code\", var_cols[1:10]), with=F])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"50a2b7677141ad167ebdc7e2b720c7695299fd0e"},"cell_type":"code","source":"head(t1_new[,c(\"ID_code\", var_cols[1:10]), with=F])","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4c44efbc487256cfbaa2273d02c4a4ccda9e02db"},"cell_type":"markdown","source":"Train an LGB model."},{"metadata":{"trusted":true,"_uuid":"061e9f49a6b32cf682c17cc0062c8d90a39f5b1c"},"cell_type":"code","source":"ts1 <- rbind(t1_new, s1)\nset.seed(99999)\ncvFoldsList <- createFolds(as.factor(ts1[filter==0, target]), k=10)\n\nvarnames <- setdiff(colnames(ts1), c(\"ID_code\",\"target\", \"filter\",\"fold\",\"idx\"))\ndtrain <- lgb.Dataset(data.matrix(ts1[filter==0,varnames,with=F]), label=ts1[filter==0, target], free_raw_data = FALSE)\n\nparams <- list(objective = \"binary\", \n               boost=\"gbdt\",\n               metric=\"auc\",\n               boost_from_average=\"false\",\n               num_threads=4,\n               learning_rate = 0.01,\n               num_leaves = 3,\n               max_depth=-1,\n               tree_learner = \"serial\",\n               feature_fraction = 0.04,\n               bagging_freq = 5,\n               bagging_fraction = 0.4,\n               min_data_in_leaf = 80,\n               min_sum_hessian_in_leaf = 10.0,\n               verbosity = 1)\n\ntme <- Sys.time()\nlgb1 <- lgb.cv(params,\n               dtrain,\n               nrounds=1000000,\n               folds=cvFoldsList,\n               early_stopping_rounds = 3000,\n               eval_freq=1000,\n               seed=99999)\nSys.time() - tme\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"194b5d8755d74026180abdfebda6e74f82d6d2cc"},"cell_type":"markdown","source":"Predict on the test set."},{"metadata":{"trusted":true,"_uuid":"03597aa6535386f28e52c257dc40b5d14a60b5ad"},"cell_type":"code","source":"test_preds <- LGB_CV_Predict(lgb1, data.matrix(ts1[filter==2, varnames, with=F]), type=\"test\")\ndt <- data.table(ID_code=ts1[filter==2, ID_code], target=test_preds)\nfwrite(dt, \"./submission.csv\")","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}